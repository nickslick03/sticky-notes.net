(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300&display=swap);"]),i.push([n.id,"/* GLOBAL */\n\n:root {\n    background-image: radial-gradient(rgb(179, 179, 250), rgb(97, 97, 211));\n    min-height: 100vh;\n    -webkit-font-family: 'Roboto Slab', serif;\n    font-family: 'Roboto Slab', serif;\n    font-weight:100 \n}\n\nbody {\n    margin: 0;\n}\n\n.noselect {\n    -webkit-touch-callout: none; \n    -webkit-user-select: none; \n    -khtml-user-select: none; \n    -moz-user-select: none; \n    -ms-user-select: none; \n    user-select: none; \n}\n\nmain {\n    margin-top: 20px;\n}\n\n/* TITLE */\n\nh1, h2 {\n    box-shadow: 0px 0px 10px 1px rgb(85, 85, 85);\n    margin: 0;\n    border-radius: 10px;\n    display: flex;\n    align-items: center;\n}\n\nh1 {\n    color: rgb(97, 97, 211);\n    background-color: rgb(255, 255, 255);\n    margin: 0 0 20px 0;\n    padding: 30px;\n    height: 100px;\n    width: 100px;\n}\n\nh2 {\n    color: rgb(255, 255, 255);\n    border: 4px solid rgb(184, 201, 255);\n    padding: 10px;\n}\n\n/* JS MODULES */\n\n.moduleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 40px;\n}\n\n.moduleContainer > * {\n    margin: 25px 0 25px 0;\n}\n\n.topContainer {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.topContainer > * {\n    margin: 0 10px 0 10px;\n}\n\n.moduleSubContainer {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.moduleSubContainer > * {\n    margin: 20px;\n}\n\n.link {\n    color: white;\n    font-weight: bold;\n}\n\n.link:hover {\n    text-decoration: underline;\n}\n\n\n/* SORT/EDIT */\n\n.sortContainer, .editButton {\n    font-size: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n    z-index: 1;\n}\n\n.sortContainer > *, .editButton {\n    background-color: white;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0px 0px 10px 1px rgb(85, 85, 85);\n}\n\n.sortDropdown {\n    position: absolute;\n    top: 46px;\n    display: none;\n}\n\n.sortContainer:hover > .sortDropdown, .sortDropdown:hover {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.sortDropdown > * {\n    display: flex;\n    justify-content: center;\n    border-radius: 3px;\n}\n.sortDropdown > *:hover {\n    background-color: rgba(128, 128, 128, 0.5);\n}\n\n/* STICKY NOTE */\n\n.stickyNoteContainer {\n    width: 250px;\n    height: 250px;\n    box-shadow: 5px 5px 10px 1px rgb(85, 85, 85);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    transition-property: transform;\n    transition-duration: .5s;\n}\n\n.stickyNoteContainer:hover {\n    transform: scale(105%);\n}\n\n.stickyNoteContainer > * {\n    width: 220px;\n}\n\n.title {\n    font-size: 1.5rem;\n    margin: 0;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n}\n\n.importance {\n    flex: 1;\n    font-style: italic;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.description {\n    font-size: 1.3rem;\n    flex: 4;\n    overflow: auto;\n}\n\n.date {\n    font-size: 1.3rem;\n    padding-bottom: 5px;\n}\n\n/* STICKY NOTE PAD */\n\n.stickyNotePadContainer {\n    width: 250px;\n    height: 250px;\n    position: relative;\n    transition-property: transform;\n    transition-duration: .5s;\n}\n\n.stickyNotePadContainer:hover {\n    transform: scale(105%);\n}\n\n.stickyNotePadContainer > * {\n    width: 200px;\n    height: 200px;\n    font-size: 2rem;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n}\n\n.stickyNotePadContainer > *:nth-child(1) {\n    box-shadow: 5px 5px 10px 1px rgb(85, 85, 85);\n}\n\n.stickyNotePadContainer > *:nth-child(2) {\n    left: 25px;\n    bottom: 25px;\n}\n\n.stickyNotePadContainer > *:nth-child(1) {\n    left: 50px;\n    top: 50px;\n}\n\n/* PLUS BUTTON */\n\n#plusButton {\n    font-family: initial;\n    height: 80px;\n    width: 80px;\n    font-size: 9rem;\n    position: fixed;\n    transform: translate(-50%, -50%);\n    top: calc(100% - 70px);\n    left: calc(100% - 70px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#plusButton > :first-child {\n    font-family: Arial, Helvetica, sans-serif;\n    height: 80px;\n    width: 80px;\n    position: fixed;\n    color: white;\n    background-color: none;\n    border-radius: 50px;\n    box-shadow: none;\n    transform: rotate(0deg);\n    transition-property: background-color, box-shadow, transform;\n    transition-duration: .8s;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#plusButton[data-clicked] > :first-child {\n    background-color: rgba(255, 255, 255, 0.5);\n    box-shadow: 0 0 10px 10px rgba(255, 255, 255, 0.5);\n    transform: rotate(-90deg);\n}\n\n#plusButton > :nth-child(2), #plusButton > :nth-child(3) {\n    opacity: 0;\n    top: 0;\n    visibility: hidden;\n    transition-property: opacity, top, visibility;\n    transition-duration: .8s;\n}\n\n#plusButton > :nth-child(2) {\n    position: fixed;\n    z-index: -1;\n    width: 60px;\n    height: 60px;\n    background-image: radial-gradient(red, darkred);\n}\n\n#plusButton[data-clicked] > :nth-child(2) {\n    z-index: 1;\n    opacity: 1;\n    top: -80px;\n    visibility: visible;\n}\n\n#plusButton > :nth-child(3) {\n    -webkit-transform: scale(.25);\n    transform: scale(.25);\n    position: fixed;\n    top: -100px;\n    z-index: -1;\n    display: flex;\n    align-items: center;\n    justify-content: center;    \n}\n\n#plusButton[data-clicked] > :nth-child(3) {\n    z-index: 2;\n    opacity: 1;\n    top: -260px;\n    visibility: visible;\n}\n\n#plusButton > :nth-child(3) > div > div {\n    background-image: radial-gradient(darkblue, blue);\n}\n\n#plusButton > :last-child {\n    position: fixed;\n    width: 0;\n    height: 0;\n    bottom: 80px;\n    z-index: 0;\n}\n\n#plusButton[data-clicked] > :last-child {\n    width: 100px;\n    height: 200px;\n}\n\n/* TRANSITION.JS */\n\nbody > *, main > * {\n    transition-property: visibility, opacity, transform;\n    transition-duration: 1s;\n}\n\n#coverDiv {\n    position: fixed;\n    z-index: 1;\n    width: 100vw;\n    height: 100vh;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n}\n\n.center {\n    position: fixed;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n    z-index: 2;\n}\n\n/* NEW&EDIT STICKY NOTE . MJS */\n\n.formContainer {\n    color: white;\n    box-shadow: 0px 0px 1000px 50px rgb(0, 0, 0);\n    width: 300px;\n    height: 500px;\n    border-radius: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.buttons {\n    display: flex;\n}\n\n.buttons > div {\n    padding: 5px;\n    margin: 0 10px 0 10px;\n    border: 2px solid white;\n    border-radius: 5px;\n    transition-property: all;\n    transition-duration: .5s;\n}\n\n.buttons > div:hover {\n    background-color: white;\n}\n\n.buttons > div:hover {\n   color: black;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/* GLOBAL */\n\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300&display=swap');\n\n:root {\n    background-image: radial-gradient(rgb(179, 179, 250), rgb(97, 97, 211));\n    min-height: 100vh;\n    -webkit-font-family: 'Roboto Slab', serif;\n    font-family: 'Roboto Slab', serif;\n    font-weight:100 \n}\n\nbody {\n    margin: 0;\n}\n\n.noselect {\n    -webkit-touch-callout: none; \n    -webkit-user-select: none; \n    -khtml-user-select: none; \n    -moz-user-select: none; \n    -ms-user-select: none; \n    user-select: none; \n}\n\nmain {\n    margin-top: 20px;\n}\n\n/* TITLE */\n\nh1, h2 {\n    box-shadow: 0px 0px 10px 1px rgb(85, 85, 85);\n    margin: 0;\n    border-radius: 10px;\n    display: flex;\n    align-items: center;\n}\n\nh1 {\n    color: rgb(97, 97, 211);\n    background-color: rgb(255, 255, 255);\n    margin: 0 0 20px 0;\n    padding: 30px;\n    height: 100px;\n    width: 100px;\n}\n\nh2 {\n    color: rgb(255, 255, 255);\n    border: 4px solid rgb(184, 201, 255);\n    padding: 10px;\n}\n\n/* JS MODULES */\n\n.moduleContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 40px;\n}\n\n.moduleContainer > * {\n    margin: 25px 0 25px 0;\n}\n\n.topContainer {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.topContainer > * {\n    margin: 0 10px 0 10px;\n}\n\n.moduleSubContainer {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.moduleSubContainer > * {\n    margin: 20px;\n}\n\n.link {\n    color: white;\n    font-weight: bold;\n}\n\n.link:hover {\n    text-decoration: underline;\n}\n\n\n/* SORT/EDIT */\n\n.sortContainer, .editButton {\n    font-size: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n    z-index: 1;\n}\n\n.sortContainer > *, .editButton {\n    background-color: white;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0px 0px 10px 1px rgb(85, 85, 85);\n}\n\n.sortDropdown {\n    position: absolute;\n    top: 46px;\n    display: none;\n}\n\n.sortContainer:hover > .sortDropdown, .sortDropdown:hover {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.sortDropdown > * {\n    display: flex;\n    justify-content: center;\n    border-radius: 3px;\n}\n.sortDropdown > *:hover {\n    background-color: rgba(128, 128, 128, 0.5);\n}\n\n/* STICKY NOTE */\n\n.stickyNoteContainer {\n    width: 250px;\n    height: 250px;\n    box-shadow: 5px 5px 10px 1px rgb(85, 85, 85);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    transition-property: transform;\n    transition-duration: .5s;\n}\n\n.stickyNoteContainer:hover {\n    transform: scale(105%);\n}\n\n.stickyNoteContainer > * {\n    width: 220px;\n}\n\n.title {\n    font-size: 1.5rem;\n    margin: 0;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n}\n\n.importance {\n    flex: 1;\n    font-style: italic;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.description {\n    font-size: 1.3rem;\n    flex: 4;\n    overflow: auto;\n}\n\n.date {\n    font-size: 1.3rem;\n    padding-bottom: 5px;\n}\n\n/* STICKY NOTE PAD */\n\n.stickyNotePadContainer {\n    width: 250px;\n    height: 250px;\n    position: relative;\n    transition-property: transform;\n    transition-duration: .5s;\n}\n\n.stickyNotePadContainer:hover {\n    transform: scale(105%);\n}\n\n.stickyNotePadContainer > * {\n    width: 200px;\n    height: 200px;\n    font-size: 2rem;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n}\n\n.stickyNotePadContainer > *:nth-child(1) {\n    box-shadow: 5px 5px 10px 1px rgb(85, 85, 85);\n}\n\n.stickyNotePadContainer > *:nth-child(2) {\n    left: 25px;\n    bottom: 25px;\n}\n\n.stickyNotePadContainer > *:nth-child(1) {\n    left: 50px;\n    top: 50px;\n}\n\n/* PLUS BUTTON */\n\n#plusButton {\n    font-family: initial;\n    height: 80px;\n    width: 80px;\n    font-size: 9rem;\n    position: fixed;\n    transform: translate(-50%, -50%);\n    top: calc(100% - 70px);\n    left: calc(100% - 70px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#plusButton > :first-child {\n    font-family: Arial, Helvetica, sans-serif;\n    height: 80px;\n    width: 80px;\n    position: fixed;\n    color: white;\n    background-color: none;\n    border-radius: 50px;\n    box-shadow: none;\n    transform: rotate(0deg);\n    transition-property: background-color, box-shadow, transform;\n    transition-duration: .8s;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#plusButton[data-clicked] > :first-child {\n    background-color: rgba(255, 255, 255, 0.5);\n    box-shadow: 0 0 10px 10px rgba(255, 255, 255, 0.5);\n    transform: rotate(-90deg);\n}\n\n#plusButton > :nth-child(2), #plusButton > :nth-child(3) {\n    opacity: 0;\n    top: 0;\n    visibility: hidden;\n    transition-property: opacity, top, visibility;\n    transition-duration: .8s;\n}\n\n#plusButton > :nth-child(2) {\n    position: fixed;\n    z-index: -1;\n    width: 60px;\n    height: 60px;\n    background-image: radial-gradient(red, darkred);\n}\n\n#plusButton[data-clicked] > :nth-child(2) {\n    z-index: 1;\n    opacity: 1;\n    top: -80px;\n    visibility: visible;\n}\n\n#plusButton > :nth-child(3) {\n    -webkit-transform: scale(.25);\n    transform: scale(.25);\n    position: fixed;\n    top: -100px;\n    z-index: -1;\n    display: flex;\n    align-items: center;\n    justify-content: center;    \n}\n\n#plusButton[data-clicked] > :nth-child(3) {\n    z-index: 2;\n    opacity: 1;\n    top: -260px;\n    visibility: visible;\n}\n\n#plusButton > :nth-child(3) > div > div {\n    background-image: radial-gradient(darkblue, blue);\n}\n\n#plusButton > :last-child {\n    position: fixed;\n    width: 0;\n    height: 0;\n    bottom: 80px;\n    z-index: 0;\n}\n\n#plusButton[data-clicked] > :last-child {\n    width: 100px;\n    height: 200px;\n}\n\n/* TRANSITION.JS */\n\nbody > *, main > * {\n    transition-property: visibility, opacity, transform;\n    transition-duration: 1s;\n}\n\n#coverDiv {\n    position: fixed;\n    z-index: 1;\n    width: 100vw;\n    height: 100vh;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n}\n\n.center {\n    position: fixed;\n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n    z-index: 2;\n}\n\n/* NEW&EDIT STICKY NOTE . MJS */\n\n.formContainer {\n    color: white;\n    box-shadow: 0px 0px 1000px 50px rgb(0, 0, 0);\n    width: 300px;\n    height: 500px;\n    border-radius: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.buttons {\n    display: flex;\n}\n\n.buttons > div {\n    padding: 5px;\n    margin: 0 10px 0 10px;\n    border: 2px solid white;\n    border-radius: 5px;\n    transition-property: all;\n    transition-duration: .5s;\n}\n\n.buttons > div:hover {\n    background-color: white;\n}\n\n.buttons > div:hover {\n   color: black;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=e(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var f=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);t[s].references--}for(var c=r(n,a),d=0;d<o.length;d++){var l=e(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(795),a=e.n(r),o=e(569),i=e.n(o),s=e(565),c=e.n(s),d=e(216),l=e.n(d),u=e(589),A=e.n(u),m=e(426),f={};function p(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function h(n){return p(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function g(n){p(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(n){if(p(1,arguments),!h(n)&&"number"!=typeof n)return!1;var t=g(n);return!isNaN(Number(t))}f.styleTagTransform=A(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var v={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function y(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}const b={date:y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var x={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=a.width?String(a.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var s=n.defaultWidth,c=a.width?String(a.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const B={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?E(c,(function(n){return n.test(s)})):k(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(d):d,i=e.valueCallback?e.valueCallback(i):i;var l=t.slice(s.length);return{value:i,rest:l}}}function k(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function E(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var T,N={ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(T.matchPattern);if(!e)return null;var r=e[0],a=n.match(T.parsePattern);if(!a)return null;var o=T.valueCallback?T.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=n.slice(r.length);return{value:o,rest:i}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const S={code:"en-US",formatDistance:function(n,t,e){var r,a=v[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:b,formatRelative:function(n,t,e,r){return x[n]},localize:B,match:N,options:{weekStartsOn:0,firstWeekContainsDate:1}};function D(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function M(n,t){p(2,arguments);var e=g(n).getTime(),r=D(t);return new Date(e+r)}function U(n,t){p(2,arguments);var e=D(t);return M(n,-e)}var P=864e5;function Y(n){p(1,arguments);var t=1,e=g(n),r=e.getUTCDay(),a=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function O(n){p(1,arguments);var t=g(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=Y(r),o=new Date(0);o.setUTCFullYear(e,0,4),o.setUTCHours(0,0,0,0);var i=Y(o);return t.getTime()>=a.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}function j(n){p(1,arguments);var t=O(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=Y(e);return r}var W=6048e5;function z(n,t){p(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:D(a),i=null==e.weekStartsOn?o:D(e.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=g(n),c=s.getUTCDay(),d=(c<i?7:0)+c-i;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function L(n,t){p(1,arguments);var e=g(n),r=e.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:D(i),c=null==a.firstWeekContainsDate?s:D(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,c),d.setUTCHours(0,0,0,0);var l=z(d,t),u=new Date(0);u.setUTCFullYear(r,0,c),u.setUTCHours(0,0,0,0);var A=z(u,t);return e.getTime()>=l.getTime()?r+1:e.getTime()>=A.getTime()?r:r-1}function q(n,t){p(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:D(a),i=null==e.firstWeekContainsDate?o:D(e.firstWeekContainsDate),s=L(n,t),c=new Date(0);c.setUTCFullYear(s,0,i),c.setUTCHours(0,0,0,0);var d=z(c,t);return d}var F=6048e5;function R(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const H=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return R("yy"===t?r%100:r,t.length)},Z=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):R(e+1,2)},_=function(n,t){return R(n.getUTCDate(),t.length)},Q=function(n,t){return R(n.getUTCHours()%12||12,t.length)},X=function(n,t){return R(n.getUTCHours(),t.length)},J=function(n,t){return R(n.getUTCMinutes(),t.length)},G=function(n,t){return R(n.getUTCSeconds(),t.length)},$=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return R(Math.floor(r*Math.pow(10,e-3)),t.length)};var V={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return H(n,t)},Y:function(n,t,e,r){var a=L(n,r),o=a>0?a:1-a;return"YY"===t?R(o%100,2):"Yo"===t?e.ordinalNumber(o,{unit:"year"}):R(o,t.length)},R:function(n,t){return R(O(n),t.length)},u:function(n,t){return R(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return R(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return R(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return Z(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return R(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){p(1,arguments);var e=g(n),r=z(e,t).getTime()-q(e,t).getTime();return Math.round(r/F)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):R(a,t.length)},I:function(n,t,e){var r=function(n){p(1,arguments);var t=g(n),e=Y(t).getTime()-j(t).getTime();return Math.round(e/W)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):R(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):_(n,t)},D:function(n,t,e){var r=function(n){p(1,arguments);var t=g(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=e-r;return Math.floor(a/P)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):R(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return R(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return R(o,t.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return R(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return Q(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):X(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):R(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):R(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):J(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):G(n,t)},S:function(n,t){return $(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return nn(a);case"XXXX":case"XX":return tn(a);default:return tn(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return nn(a);case"xxxx":case"xx":return tn(a);default:return tn(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+K(a,":");default:return"GMT"+tn(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+K(a,":");default:return"GMT"+tn(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return R(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return R((r._originalDate||n).getTime(),t.length)}};function K(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return e+String(a);var i=t||"";return e+String(a)+i+R(o,2)}function nn(n,t){return n%60==0?(n>0?"-":"+")+R(Math.abs(n)/60,2):tn(n,t)}function tn(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+R(Math.floor(a/60),2)+e+R(a%60,2)}const en=V;function rn(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function an(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const on={p:an,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return rn(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",rn(a,t)).replace("{{time}}",an(o,t))}};function sn(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var cn=["D","DD"],dn=["YY","YYYY"];function ln(n){return-1!==cn.indexOf(n)}function un(n){return-1!==dn.indexOf(n)}function An(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var mn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pn=/^'([^]*?)'?$/,hn=/''/g,gn=/[a-zA-Z]/;function Cn(n,t,e){p(2,arguments);var r=String(t),a=e||{},o=a.locale||S,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:D(i),c=null==a.firstWeekContainsDate?s:D(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,l=null==d?0:D(d),u=null==a.weekStartsOn?l:D(a.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=g(n);if(!C(A))throw new RangeError("Invalid time value");var m=sn(A),f=U(A,m),h={firstWeekContainsDate:c,weekStartsOn:u,locale:o,_originalDate:A},v=r.match(fn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,on[t])(n,o.formatLong,h):n})).join("").match(mn).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return vn(e);var i=en[r];if(i)return!a.useAdditionalWeekYearTokens&&un(e)&&An(e,t,n),!a.useAdditionalDayOfYearTokens&&ln(e)&&An(e,t,n),i(f,e,o.localize,h);if(r.match(gn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return v}function vn(n){return n.match(pn)[1].replace(hn,"'")}Math.pow(10,8);var yn=36e5;function bn(n,t){p(1,arguments);var e=t||{},r=null==e.additionalDigits?2:D(e.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var a,o=kn(n);if(o.date){var i=En(o.date,r);a=Tn(i.restDateString,i.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var s,c=a.getTime(),d=0;if(o.time&&(d=Sn(o.time),isNaN(d)))return new Date(NaN);if(!o.timezone){var l=new Date(c+d),u=new Date(0);return u.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),u.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),u}return s=Mn(o.timezone),isNaN(s)?new Date(NaN):new Date(c+d+s)}var xn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},wn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Bn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,In=/^([+-])(\d{2})(?::?(\d{2}))?$/;function kn(n){var t,e={},r=n.split(xn.dateTimeDelimiter);if(r.length>2)return e;if(/:/.test(r[0])?t=r[0]:(e.date=r[0],t=r[1],xn.timeZoneDelimiter.test(e.date)&&(e.date=n.split(xn.timeZoneDelimiter)[0],t=n.substr(e.date.length,n.length))),t){var a=xn.timezone.exec(t);a?(e.time=t.replace(a[1],""),e.timezone=a[1]):e.time=t}return e}function En(n,t){var e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=n.match(e);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:n.slice((r[1]||r[2]).length)}}function Tn(n,t){if(null===t)return new Date(NaN);var e=n.match(wn);if(!e)return new Date(NaN);var r=!!e[4],a=Nn(e[1]),o=Nn(e[2])-1,i=Nn(e[3]),s=Nn(e[4]),c=Nn(e[5])-1;if(r)return function(n,t,e){return t>=1&&t<=53&&e>=0&&e<=6}(0,s,c)?function(n,t,e){var r=new Date(0);r.setUTCFullYear(n,0,4);var a=7*(t-1)+e+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,s,c):new Date(NaN);var d=new Date(0);return function(n,t,e){return t>=0&&t<=11&&e>=1&&e<=(Un[t]||(Pn(n)?29:28))}(t,o,i)&&function(n,t){return t>=1&&t<=(Pn(n)?366:365)}(t,a)?(d.setUTCFullYear(t,o,Math.max(a,i)),d):new Date(NaN)}function Nn(n){return n?parseInt(n):1}function Sn(n){var t=n.match(Bn);if(!t)return NaN;var e=Dn(t[1]),r=Dn(t[2]),a=Dn(t[3]);return function(n,t,e){return 24===n?0===t&&0===e:e>=0&&e<60&&t>=0&&t<60&&n>=0&&n<25}(e,r,a)?e*yn+6e4*r+1e3*a:NaN}function Dn(n){return n&&parseFloat(n.replace(",","."))||0}function Mn(n){if("Z"===n)return 0;var t=n.match(In);if(!t)return 0;var e="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(n,t){return t>=0&&t<=59}(0,a)?e*(r*yn+6e4*a):NaN}var Un=[31,null,31,30,31,30,31,31,30,31,30,31];function Pn(n){return n%400==0||n%4==0&&n%100!=0}function Yn(n,t){p(2,arguments);var e=g(n),r=g(t),a=e.getTime()-r.getTime();return a>0?-1:a<0?1:a}const On=[],jn={getChildren(){let n=Zn(),t=[];for(let e of n)e.pad===this.name&&t.push(e);return t},set color(n){this._color=function(n){let t=0,e=0,r=0;4==n.length?(t="0x"+n[1]+n[1],e="0x"+n[2]+n[2],r="0x"+n[3]+n[3]):7==n.length&&(t="0x"+n[1]+n[2],e="0x"+n[3]+n[4],r="0x"+n[5]+n[6]),t/=255,e/=255,r/=255;let a=Math.min(t,e,r),o=Math.max(t,e,r),i=o-a,s=0,c=0,d=0;return s=0==i?0:o==t?(e-r)/i%6:o==e?(r-t)/i+2:(t-e)/i+4,s=Math.round(60*s),s<0&&(s+=360),d=(o+a)/2,c=0==i?0:i/(1-Math.abs(2*d-1)),c=+(100*c).toFixed(1),d=+(100*d).toFixed(1),"hsl("+s+","+c+"%,"+d+"%)"}(n)},get color(){return function(n){let t=n.indexOf(",")>-1?",":" ",e=(n=n.substr(4).split(")")[0].split(t))[0],r=n[1].substr(0,n[1].length-1)/100,a=n[2].substr(0,n[2].length-1)/100;e.indexOf("deg")>-1?e=e.substr(0,e.length-3):e.indexOf("rad")>-1?e=Math.round(e.substr(0,e.length-3)*(180/Math.PI)):e.indexOf("turn")>-1&&(e=Math.round(360*e.substr(0,e.length-4))),e>=360&&(e%=360);let o=(1-Math.abs(2*a-1))*r,i=o*(1-Math.abs(e/60%2-1)),s=a-o/2,c=0,d=0,l=0;return 0<=e&&e<60?(c=o,d=i,l=0):60<=e&&e<120?(c=i,d=o,l=0):120<=e&&e<180?(c=0,d=o,l=i):180<=e&&e<240?(c=0,d=i,l=o):240<=e&&e<300?(c=i,d=0,l=o):300<=e&&e<360&&(c=o,d=0,l=i),c=Math.round(255*(c+s)).toString(16),d=Math.round(255*(d+s)).toString(16),l=Math.round(255*(l+s)).toString(16),1==c.length&&(c="0"+c),1==d.length&&(d="0"+d),1==l.length&&(l="0"+l),"#"+c+d+l}(this._color)}},Wn=(n,t)=>{const e=Object.create(jn);Object.assign(e,{name:n,color:t}),On.push(e)},zn=n=>{const t=Ln([...On],n);return qn(On),t},Ln=(n,t)=>("name"===t&&n.sort(((n,t)=>n.name<t.name?-1:1)),n),qn=n=>{const t=[];for(const e of n){t.push({});for(const n of Object.getOwnPropertyNames(e))"_color"===n?t[t.length-1].color=e.color:t[t.length-1][n]=e[n]}localStorage.setItem("stickyNotePads",JSON.stringify(t))},Fn=[],Rn={get importance(){return 1===this._importance?"!":2===this._importance?"!!":3===this._importance?"!!!":""},set importance(n){this._importance=n}},Hn=(n,t,e,r,a)=>{const o=Object.create(Rn);Object.assign(o,{importance:n,title:t,description:e,date:bn(r),pad:a}),Fn.push(o)},Zn=n=>{const t=_n([...Fn],n);return(n=>{const t=[];for(const e of n){t.push({});for(const n of Object.getOwnPropertyNames(e))t[t.length-1][n]="date"===n?Cn(e[n],"yyyy-MM-dd"):e[n]}localStorage.setItem("stickyNotes",JSON.stringify(t))})(Fn),t},_n=(n,t)=>"importance"===t?(n.sort(((n,t)=>{let e=t._importance-n._importance;return 0===e?Yn(t.date,n.date):e})),n):"date"===t?(n.sort(((n,t)=>{let e=Yn(t.date,n.date);return 0===e?t._importance-n._importance:e})),n):"title"===t?(n.sort(((n,t)=>n.title<t.title?-1:1)),n):"pad"===t?(n.sort(((n,t)=>n.pad<t.pad?-1:1)),n):n,Qn=n=>{Fn.splice(Fn.indexOf(n),1)},Xn=document.createElement("div");Xn.id="coverDiv";const Jn=(()=>{const n=document.querySelector("main");let t,e=!1;return{replace(r){if(!e){let a=r();if(void 0===t)document.body.appendChild(Xn),e=!0,Gn(a),n.appendChild(a),setTimeout((()=>{$n(a),Vn()}),1),setTimeout((()=>{t=r,e=!1,Xn.remove()}),1001);else{let o=t();document.body.appendChild(Xn),e=!0,Gn(o),a.style.position="absolute",Gn(a),n.appendChild(a),setTimeout((()=>{o.remove(),$n(o),a.style.position="static",$n(a),Vn()}),1e3),setTimeout((()=>{t=r,e=!1,Xn.remove()}),2e3)}}},reappend(){t().remove(),n.appendChild(t())}}})();function Gn(n){n.style.visibility="hidden",n.style.opacity="0",n.style.transform="translateY(50px)"}function $n(n){n.style.visibility="",n.style.opacity="",n.style.transform=""}function Vn(){document.body.scrollTop=0,document.documentElement.scrollTop=0}const Kn=(()=>{const n=document.getElementById("stickyNotePadForm"),t=n.querySelector("h2"),e=document.getElementById("newStickyNotePad"),r=document.createElement("div");let a=null;const o=n.children[1],i=n.children[2].children[1],s=n.children[3],c=document.createElement("div"),d=s.children[0],l=s.children[1];function u(e){e?(t.textContent="Edit Sticky Note Pad",a=e,o.value=e.name,i.value=e.color,s.appendChild(c)):(t.textContent="New Sticky Note Pad",i.value="#ff0000"),n.style.backgroundColor=i.value,document.body.appendChild(r),document.body.appendChild(n)}function A(){n.remove(),r.remove(),c.remove(),o.value="",i.value=""}return r.id="coverDiv",c.innerText="delete",n.remove(),e.addEventListener("click",(()=>{u()})),d.addEventListener("click",(()=>{A()})),l.addEventListener("click",(()=>{for(let n of zn())if(n.name===o.value){if(a){if(a.name!==n.name)return void alert(o.value+" is already the name of another sticky note pad. Please use a different name.");continue}return void alert(o.value+" is already the name of another sticky note pad. Please use a different name.")}if(a){let n=a.getChildren();for(let t of n)t.pad=o.value;a.name=o.value,a.color=i.value,a=null}else Wn(o.value,i.value);Jn.reappend(),A()})),c.addEventListener("click",(()=>{confirm(`This will delete all sticky notes in ${a.name}!\nAre you sure want to continue?`)&&((n=>{for(let t of n.getChildren())Qn(t);On.splice(On.indexOf(n),1),0===On.length&&Wn("main","#0061c2"),qn(On)})(a),a=null,Jn.replace(mt),A())})),{openPopup:u}})(),nt=(()=>{const n=document.createElement("div"),t=document.createElement("div"),e=document.createElement("div");n.className="sortContainer",e.className="sortDropdown",t.textContent="Sort";for(let r of[t,e])n.appendChild(r);return{stickyNote(){let t=n.cloneNode(!0);for(let n of["importance","date","title","pad"]){const e=document.createElement("div");e.innerText=n,t.lastChild.appendChild(e)}return t},stickyNotePad(){let t=n.cloneNode(!0);for(let n of["importance","date","title"]){const e=document.createElement("div");e.innerText=n,t.lastChild.appendChild(e)}return t}}})(),tt=(()=>{const n=document.createElement("div"),t=document.createElement("div"),e=document.createElement("div"),r=document.createElement("h2"),a=nt.stickyNotePad(),o=document.createElement("div"),i=document.createElement("div");n.className="moduleContainer",t.className="topContainer",e.classList.add("link"),e.classList.add("noselect"),o.classList.add("editButton"),i.className="moduleSubContainer",e.textContent="Back",o.textContent="Edit",e.addEventListener("click",(()=>{Jn.replace(mt)}));for(let n of[e,o,r,a])t.appendChild(n);for(let e of[t,i])n.appendChild(e);return{sortContainer:a,title:r,edit:o,container:n,stickyNotesContainer:i}})();function et(n,t){tt.stickyNotesContainer.textContent="";const e=_n(n.getChildren(),t);for(let n of e)tt.stickyNotesContainer.appendChild(at(n))}const rt=(()=>{const n=document.getElementById("stickyNoteForm"),t=n.querySelector("h2"),e=document.getElementById("newStickyNote"),r=document.createElement("div");let a=null;const o=n.querySelector('[placeholder="title"]'),i=n.querySelector("#importance"),s=n.querySelector("#description"),c=n.querySelector("#date"),d=n.querySelector("#pad"),l=n.children[n.children.length-1],u=document.createElement("div"),A=l.children[0],m=l.children[1],f=[o,i,s,c,d];function p(e){const A=zn("name");for(const n of A){const t=document.createElement("option");t.setAttribute("value",`${n.name}`),t.textContent=n.name,d.appendChild(t)}e?(t.textContent="Edit Sticky Note",a=e,o.value=e.title,i.value=e._importance,s.value=e.description,c.value=Cn(e.date,"yyyy-MM-dd"),d.value=e.pad,l.appendChild(u)):t.textContent="New Sticky Note",h(),document.body.appendChild(r),document.body.appendChild(n)}function h(){const t=Array.from(d.children).map((n=>n.textContent)),e=zn("name")[t.indexOf(d.value)]._color;n.style.backgroundImage=`radial-gradient(${ct(e)}, ${e})`}function g(){u.remove(),n.remove(),r.remove();for(const n of f)n.value="";d.textContent=""}return r.id="coverDiv",u.innerText="delete",n.remove(),e.addEventListener("click",(()=>{p()})),d.addEventListener("click",(()=>{h()})),A.addEventListener("click",(()=>{g()})),m.addEventListener("click",(()=>{"Invalid Date"!=bn(c.value)?(a?(a.title=o.value,a.importance=parseInt(i.value),a.description=s.value,a.date=bn(c.value),a.pad=d.value,a=null):Hn(parseInt(i.value),o.value,s.value,c.value,d.value),Jn.reappend(),g()):alert("Please enter a valid date.")})),u.addEventListener("click",(()=>{Qn(a),a=null,Jn.reappend(),g()})),{openPopup:p}})(),at=n=>{const t=document.createElement("div");t.classList.add("stickyNoteContainer");const e=(n=>{for(let t of On)if(t.name===n)return On[On.indexOf(t)]})(n.pad)._color;t.style.backgroundImage=`radial-gradient(${ct(e)}, ${e})`,t.style.color=st(e);const r=document.createElement("h3"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");return r.className="title",a.className="importance",o.className="description",i.className="date",r.textContent=n.title,a.textContent=n.importance,o.textContent=n.description,i.textContent=Cn(n.date,"MM/dd/yyyy"),t.appendChild(r),t.appendChild(a),t.appendChild(o),t.appendChild(i),t.addEventListener("click",(()=>{rt.openPopup(n)})),t},ot=n=>{const t=document.createElement("div");t.className="stickyNotePadContainer";const e=n._color;for(let r=0;r<3;r++){const a=document.createElement("div");a.style.backgroundImage=`radial-gradient(${ct(e)}, ${e})`,2===r&&(a.textContent=n.name,a.style.color=st(e)),t.appendChild(a)}return t.addEventListener("click",(()=>{var t;Jn.replace((t=n,()=>(tt.title.textContent=t.name,tt.sortContainer.lastChild.addEventListener("click",(n=>{et(t,n.target.textContent)})),tt.edit.addEventListener("click",(()=>{Kn.openPopup(t)})),et(t),tt.container)))})),t},it=n=>{const t=[];for(let e of Zn(n))t.push(at(e));return t};function st(n){return n.substring(n.lastIndexOf(",")+1,n.lastIndexOf("%"))>=50?"black":"white"}function ct(n){let t=parseInt(n.substring(n.lastIndexOf(",")+1,n.lastIndexOf("%")));return t>=50?(t-=10,n.substring(0,n.lastIndexOf(",")+1)+t+n.substring(n.lastIndexOf("%"))):(t+=10,n.substring(0,n.lastIndexOf(",")+1)+t+n.substring(n.lastIndexOf("%")))}const dt=(()=>{const n=document.createElement("div"),t=document.createElement("div"),e=document.createElement("div"),r=document.createElement("h2"),a=nt.stickyNote(),o=document.createElement("div");n.className="moduleContainer",t.className="topContainer",e.classList.add("link"),e.classList.add("noselect"),o.className="moduleSubContainer",e.textContent="Back",r.textContent="All Sticky Notes",e.addEventListener("click",(()=>{Jn.replace(mt)})),a.lastChild.addEventListener("click",(n=>{ut(n.target.textContent)}));for(const n of[e,r,a])t.appendChild(n);for(const e of[t,o])n.appendChild(e);return{container:n,stickyNotesContainer:o}})(),lt=()=>(ut("importance"),dt.container);function ut(n){dt.stickyNotesContainer.textContent="";const t=it(n);for(const n of t)dt.stickyNotesContainer.appendChild(n)}const At=(()=>{const n=document.createElement("div"),t=document.createElement("h1"),e=document.createElement("h2"),r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("h2"),i=document.createElement("div");n.className="moduleContainer",r.className="moduleSubContainer",i.className="moduleSubContainer",a.className="link",t.textContent="Sticky-Notes .net",e.textContent="Top Sticky Notes",a.textContent="All Sticky Notes...",o.textContent="Sticky Note Pads";for(let n of[e,a])n.classList.add("noselect"),n.addEventListener("click",(()=>{Jn.replace(lt)}));o.classList.add("noselect");for(let s of[t,e,r,a,o,i])n.appendChild(s);return{container:n,topStickyNotesContainer:r,stickyNotePadsContainer:i}})(),mt=()=>{At.topStickyNotesContainer.innerText="",At.stickyNotePadsContainer.innerText="";const n=it("importance"),t=(n=>{const t=[];for(let n of zn("name"))t.push(ot(n));return t})();let e=0;if(0===n.length){const n=document.createElement("div");n.className="stickyNoteContainer",n.style.backgroundImage="radial-gradient(hsla(360, 0%, 40%, 0), hsla(360, 0%, 40%, 0.5))",n.style.padding="40px",n.style.boxSizing="border-box",n.textContent="Press the + in the corner to add some sticky notes!",At.topStickyNotesContainer.appendChild(n)}else for(;e<4;)n.length>e&&At.topStickyNotesContainer.appendChild(n[e]),e++;for(let n of t)At.stickyNotePadsContainer.appendChild(n);return At.container};(()=>{const n=localStorage.getItem("stickyNotePads");if(n)for(const t of JSON.parse(n))Wn(t.name,t.color);else localStorage.setItem("stickyNotePads","[]"),Wn("main","#0061c2")})(),(()=>{const n=localStorage.getItem("stickyNotes");if(n)for(const t of JSON.parse(n))Hn(t._importance,t.title,t.description,t.date,t.pad);else localStorage.setItem("stickyNotes","[]")})(),Jn.replace(mt);{const n=document.getElementById("plusButton");document.body.addEventListener("click",(t=>{t.target===n.children[0]?n.toggleAttribute("data-clicked"):n.toggleAttribute("data-clicked",!1)}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,